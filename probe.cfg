[probe]
pin: ebb: PD3 #PC5                     ; use pin PA0 and enable internal pullup resistor as this is an NC switch  use ! to invert if needed
x_offset: 6.3                ; probe is offset 6 mm from nozzle
y_offset: 59.0               ; probe is +59 mm from nozzle in Y direction
z_offset: 2.8               ; trigger point is 3.85 mm below nozzle. Larger numbers move effective Z0 CLOSER to the nozzle
speed: 7                     ; probing speed of 7 mm/second ideal is <10mm/sec  
samples: 3                   ; number of probes to perform per sample
samples_result: median       ; normalization method: see config reference
sample_retract_dist: 0.7
samples_tolerance: 0.01
samples_tolerance_retries: 3

[servo probe_servo]
pin: PC5
maximum_servo_angle: 180
minimum_pulse_width: 0.0005
maximum_pulse_width: 0.0028
initial_angle: 165

[bed_mesh]
speed: 300
horizontal_move_z: 5
mesh_min: 10, 60
mesh_max: 425, 323
probe_count: 14, 8
mesh_pps: 3, 3
algorithm: bicubic
bicubic_tension: 0.2
fade_start: 0.6
fade_end: 4
move_check_distance: 5
split_delta_z: .025

[bed_screws] # BED_SCREWS_ADJUST
screw1: 10,70
screw1_name: front left screw
screw2: 425,70
screw2_name: front right screw
screw3: 425,290
screw3_name: back right screw
screw4: 10,290
screw4_name: back left screw
speed: 150

[screws_tilt_adjust]
screw1: 5, 0
screw1_name: front left screw
screw2: 210, 0
screw2_name: front center screw
screw3: 420, 0
screw3_name: front right screw
screw4: 420, 250
screw4_name: rear right screw
screw5: 210, 250
screw5_name: rear right screw
screw6: 5, 250
screw6_name: rear left screw
horizontal_move_z: 8
speed: 250
screw_thread: CW-M3

[quad_gantry_level]
gantry_corners:
            420,1
            20,300
points:
            420,1
            420,250
            20,250
            20,1
speed: 250
horizontal_move_z: 5
max_adjust: 2
retries: 3
retry_tolerance: 0.03

# [homing_override]
# axes: xyz
# gcode:
#     G90
#     PROBE_STATUS
#     _ERROR_PROBE_DETACH
#     {% if 'X' in params %}
#         G28 X
#     {% elif 'Y' in params %}
#         G28 Y
#     {% elif 'Z' in params %}
#         G28 Z
#     {% else %}
#         G28
#     {% endif %}

# [safe_z_home]
# home_xy_position: -33, 0
# speed: 50.0
# move_to_previous: False

[axis_twist_compensation]
speed: 200
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
horizontal_move_z: 7
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
start_x: 20
#   Defines the minimum X coordinate of the calibration
#   This should be the X coordinate that positions the nozzle at the starting
#   calibration position. This parameter must be provided.
end_x: 400
#   Defines the maximum X coordinate of the calibration
#   This should be the X coordinate that positions the nozzle at the ending
#   calibration position. This parameter must be provided.
y: 150
#   Defines the Y coordinate of the calibration
#   This should be the Y coordinate that positions the nozzle during the
#   calibration process. This parameter must be provided and is recommended to
#   be near the center of the bed
type: linear
#   Defines the type of correction to apply. The choices are 'linear' or
#   'multilinear'. 'linear' uses a linear regression to fit a line with the
#   calibration points. 'multilinear' will interpolate linearly between each
#   pair of points. It is not necessary to redo a calibration after changing
#   this setting.

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_ORIGINAL
gcode:
  PROBE_ATTACH                                                                            # attaching probe
  RESPOND TYPE=command MSG="Start bed mesh leveling"                                      # send message to console
  BED_MESH_CALIBRATE_ORIGINAL                                                             # check bed level
  RESPOND TYPE=command MSG="End bed mesh leveling"                                        # send message to console
  PROBE_DETACH                                                                            # detaching probe

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: BASE_QUAD_GANTRY_LEVEL
gcode:
  PROBE_ATTACH
  BASE_QUAD_GANTRY_LEVEL
  PROBE_DETACH

[gcode_macro PROBE_ACCU]
gcode:
  PROBE_ACCURACY SAMPLES=20

[gcode_macro PROBE_CALIB]
gcode:
  G90
  G0 X150 Y100 F6000
  PROBE_CALIBRATE
  ABORT

[gcode_macro _PROBE_VARS]
variable_probe_attached: True
variable_dock_position: [295.5, 300]                                                        # XY coordinates of dock position
variable_bed_clearance: 30                                                                # bed clearance for moving to/from dock position
variable_dock_height: 5                                                                   # probe attach/detach Z position
variable_servo_up: 74                                                                     # dock's active angle position
variable_servo_down: 165                                                                  # dock's inactive position
gcode:
  RESPOND TYPE=command MSG="{ printer['gcode_macro _PROBE_VARS'] }"                       # send message with all variables to console

[gcode_macro PROBE_ATTACH]
gcode:
  PROBE_STATUS
  _PROBE_ATTACH

[gcode_macro PROBE_DETACH]
gcode:
  PROBE_STATUS
  _PROBE_DETACH

[gcode_macro _PROBE_ATTACH]
gcode:
  {% set probe_vars = printer["gcode_macro _PROBE_VARS"] %}
  {% if not probe_vars.probe_attached %}
    G90                                                                                                            # absolute positioning
    {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}                                                  # home if not homed
    RESPOND TYPE=command MSG="Attaching probe"                                                                     # send message to console
    SET_DUAL_CARRIAGE CARRIAGE=0
    G0 X{probe_vars.dock_position[0]} Y{probe_vars.dock_position[1]} Z{probe_vars.bed_clearance} F12000            # move the carriage to dock position
    G4 P200                                                                                                        # wait 0,5s      
    SET_SERVO SERVO=probe_servo ANGLE={probe_vars.servo_up}                                                        # move probe dock up
    G4 P200                                                                                                        # wait 0,5s  
    M400                                                                                                           # wait all moves is done
    G0 Z{probe_vars.dock_height} F500                                                                              # pick up probe
    G0 Z{probe_vars.bed_clearance} F500                                                                            # move bed down 
    G0 X1 Y1 F12000                                                                                                # move toolhead out of the dock to X1 Y1 coordinate
    G28 X Y
    SET_SERVO SERVO=probe_servo ANGLE={probe_vars.servo_down}                                                      # move probe dock down
    PROBE_STATUS
    _ERROR_PROBE_ATTACH                                                                                            # check probe
    RESPOND TYPE=command MSG="Probe is attached"                                                                   # send message to console
  {% else %}
    RESPOND TYPE=command MSG="Probe is already attached"                                                           # send message to console
  {% endif %}

[gcode_macro _PROBE_DETACH]
gcode:
  {% set probe_vars = printer["gcode_macro _PROBE_VARS"] %}
  {% if probe_vars.probe_attached %}
    G90                                                                                                             # absolute positioning
    {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}                                                   # home if not homed
    RESPOND TYPE=command MSG="Detaching probe"                                                                      # send message to console
    SET_DUAL_CARRIAGE CARRIAGE=0
    G0 Z10 F500
    G0 X{probe_vars.dock_position[0]} Y{probe_vars.dock_position[1]} Z{probe_vars.bed_clearance} F12000             # move the carriage to dock position
    G4 P200                                                                                                         # wait 0,5s  
    M400
    SET_SERVO SERVO=probe_servo ANGLE={probe_vars.servo_up}                                                         # move probe dock up
    G4 P200                                                                                                         # wait 0,5s  
    M400                                                                                                            # wait all moves is done
    G0 Z{probe_vars.dock_height} F3000                                                                              # detach probe
    G0 Y{probe_vars.dock_position[1]-30} F6000
    G0 X1 Y1 F12000                                                                                                 # move toolhead out of the dock to X1 Y1 coordinate
    SET_SERVO SERVO=probe_servo ANGLE={probe_vars.servo_down}                                                       # move probe dock down
    PROBE_STATUS
    _ERROR_PROBE_DETACH                                                                                             # check probe
    RESPOND TYPE=command MSG="Probe is detached"                                                                    # send message to console
  {% else %}
    RESPOND TYPE=command MSG="Probe is already detached"                                                            # send message to console
  {% endif %}

[gcode_macro _ERROR_PROBE_DETACH]
gcode:
  {% set probe_attached = printer['gcode_macro _PROBE_VARS'].probe_attached %}
  {% if probe_attached %}
    {action_raise_error("Probe is attached!")}
  {% endif %}

[gcode_macro _ERROR_PROBE_ATTACH]
gcode:
  {% set probe_attached = printer['gcode_macro _PROBE_VARS'].probe_attached %}
  {% if not probe_attached %}
    {action_raise_error("Probe is detached!")}
  {% endif %}

[gcode_macro PROBE_STATUS]
gcode:
  QUERY_PROBE
  _PROBE_STATUS

[gcode_macro _PROBE_STATUS]
gcode:
  {% if printer.probe.last_query %}
    SET_GCODE_VARIABLE MACRO=_PROBE_VARS VARIABLE=probe_attached VALUE={False}
  {% else %}
    SET_GCODE_VARIABLE MACRO=_PROBE_VARS VARIABLE=probe_attached VALUE={True}
  {% endif %}