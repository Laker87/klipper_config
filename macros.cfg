 # Print Job Management #########################################################
[gcode_macro START_PRINT]
## PrusaSliser: 
# M190 S0
# M109 S0
# SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
# ;SET_DUAL_CARRIAGE_MODE MODE=DUPLICATION
# ;SET_DUAL_CARRIAGE_MODE MODE=MIRRORED
# START_PRINT EXTRUDER=[current_extruder] EXTRUDERS=[current_extruder] EXTRUDER_TEMP={first_layer_temperature[0]} EXTRUDER1_TEMP={first_layer_temperature[1]} BED_TEMP={first_layer_bed_temperature}
## Cura: 
# M190 S0
# M109 S0
# SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
# ;SET_DUAL_CARRIAGE_MODE MODE=DUPLICATION
# ;SET_DUAL_CARRIAGE_MODE MODE=MIRRORED
# START_PRINT EXTRUDER={adhesion_extruder_nr} EXTRUDERS={extruders_enabled_count} EXTRUDER_TEMP={material_print_temperature_layer_0, 0} EXTRUDER1_TEMP={material_print_temperature_layer_0, 1} BED_TEMP={material_bed_temperature_layer_0}
description: Start routine for the print
variable_retract: 1
gcode: 
    {% set extruder = params.EXTRUDER|default(0)|int %}
    {% set extruders = params.EXTRUDERS|default(0)|int %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(230)|float %}
    {% set extruder1_temp = params.EXTRUDER1_TEMP|default(230)|float %}
    {% set bed_temp = params.BED_TEMP|default(75)|float %}
    {% set motion_sensor_enabled = printer['filament_motion_sensor motion_sensor'].enabled|lower %}
    {% set motion_sensor_enabled1 = printer['filament_motion_sensor motion_sensor1'].enabled|lower %}
    {% if bed_temp > 90 %}
        {% set bed_temp_preheat = (bed_temp * 0.85)|int %}
    {% else %}
        {% set bed_temp_preheat = (bed_temp * 0.85)|int %}
    {% endif %}
    CLEAR_PAUSE
    M220 S100                                                                               # reset feedrate
    M221 S100                                                                               # reset flowrate
	G90                                                                                     # absolute positioning
    M83                                                                                     # relative extrusion mode
    # Heating
    UPDATE_DELAYED_GCODE ID=DELAY_HEATERS DURATION=0
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}                              # set bed temp
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp_preheat}                           # wait until bed is partially heated
    {% if extruders < 2 %}
        {% if extruder == 0 %}
            ACTIVATE_EXTRUDER EXTRUDER=extruder
            {% if printer.dual_carriage.mode == "FULL_CONTROL" %}
                SET_SERVO SERVO=fan_servo ANGLE=141
                SET_SERVO SERVO=fan_servo ANGLE=140
                SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}               # set extruder temp
                SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
            {% else %}
                SET_SERVO SERVO=fan_servo ANGLE=90
                SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}               # set extruder temp
                SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={extruder1_temp}             # set extruder1 temp
                SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
            {% endif %}
        {% else %}
            SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
            ACTIVATE_EXTRUDER EXTRUDER=extruder1
            SET_SERVO SERVO=fan_servo ANGLE=39
            SET_SERVO SERVO=fan_servo ANGLE=40
            SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={extruder1_temp}                 # set extruder1 temp
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
        {% endif %}
    {% else %}
        SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}                       # set extruder temp
        SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={extruder1_temp}                     # set extruder1 temp
    {% endif %}
    # SET_GCODE_OFFSET Z=0.0
    # Homing
    {% if printer.dual_carriage.mode == "DUPLICATION" %}
        SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
        SET_DUAL_CARRIAGE CARRIAGE=0
        G28
        SET_DUAL_CARRIAGE_MODE MODE=DUPLICATION
    {% elif printer.dual_carriage.mode == "MIRRORED" %}
        SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
        SET_DUAL_CARRIAGE CARRIAGE=0
        G28
        SET_DUAL_CARRIAGE_MODE MODE=MIRRORED
    {% else %}                                                                   
        G28
        SET_DUAL_CARRIAGE CARRIAGE={extruder}
    {% endif %}
    G0 Z10 F600                                                                             # raise Z
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp}                                   # wait for bed temp
    # QUAD_GANTRY_LEVEL
    # G28 X Y
    {% if extruders < 2 %}
        {% if extruder == 0 %}
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}                        # wait for extruder temp
        {% else %}
            TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={extruder1_temp}                      # wait for extruder temp
        {% endif %}
    {% else %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}    
        TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={extruder1_temp}
    {% endif %}
    SET_FILAMENT_SENSOR SENSOR=motion_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=motion_sensor1 ENABLE=0
    # Clean nozzle
    CLEAN_NOZZLE
    M400
    {% if extruder == 0 %}
      SET_DUAL_CARRIAGE CARRIAGE=0
      ACTIVATE_EXTRUDER EXTRUDER=extruder
    {% else %}
      SET_DUAL_CARRIAGE CARRIAGE=1
      ACTIVATE_EXTRUDER EXTRUDER=extruder1
    {% endif %}
    {% if printer.dual_carriage.mode == "DUPLICATION" %}
        SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
        SET_DUAL_CARRIAGE CARRIAGE=1
        G1 X{printer.toolhead.axis_maximum.x/2} F10000
        SET_DUAL_CARRIAGE CARRIAGE=0
        SET_DUAL_CARRIAGE_MODE MODE=DUPLICATION
    {% endif %}
    {% if motion_sensor_enabled %}
        SET_FILAMENT_SENSOR SENSOR=motion_sensor ENABLE=1
    {% endif %}
    {% if motion_sensor_enabled1 %}
        SET_FILAMENT_SENSOR SENSOR=motion_sensor1 ENABLE=1
    {% endif %}
    POWER_LOSS_TIMER_START

[gcode_macro CLEAN_NOZZLE]
gcode:
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        SET_DUAL_CARRIAGE CARRIAGE=0
        G1 E20 F200
        # G1 X20 F12000
        # G1 X-19.9 F12000
        # G1 X20 F12000
        # G1 X-20 F12000
    {% else %}
        RESPOND TYPE=command MSG="Extruder is not hot enough"
    {% endif %}
    {% if printer.extruder1.can_extrude|lower == 'true' %}
        {% if printer.dual_carriage.mode == "FULL_CONTROL" %}
            ACTIVATE_EXTRUDER EXTRUDER=extruder1
            SET_DUAL_CARRIAGE CARRIAGE=1
            G1 E20 F200
            # G1 X-20 F12000
            # G1 X19.9 F12000
            # G1 X-20 F12000
            # G1 X20 F12000                                                              # retract
        {% endif %}
    {% else %}
        RESPOND TYPE=command MSG="Extruder1 is not hot enough"
    {% endif %}
    G90
    G1 Y13 F8000                                                                   
    G92 E0

[gcode_macro END_PRINT]
gcode:
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = 100 %}
    {% if act_z < lift_z %}
        {% set z_park = lift_z %}
    {% else %}
        {% set z_park = act_z %}
    {% endif %}
    CLEAR_PAUSE
    POWER_LOSS_TIMER_STOP
    POWER_LOSS_CLEAR
    G91                                                                                     # relative positioning
    G0 Z2 F600                                                                              # raise Z
    {% if printer[printer.toolhead.extruder].can_extrude|lower == 'true' %}
        G1 E-2 F1500                                                                        # retract
    {% else %}
        RESPOND TYPE=command MSG="Extruder is not hot enough"
    {% endif %}
    # M106 S255
    # G4 P60000
    SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1                                                                                   
    G28 X
    {% if printer[printer.toolhead.extruder].can_extrude|lower == 'true' %}
        G1 E-1 F1500                                                                        # retract
    {% else %}
        RESPOND TYPE=command MSG="Extruder is not hot enough"
    {% endif %}
    G90    
    G1 Z{z_park} F800                                                                       # raise Z
    G28 Y
	BEEP
    G4 P500
    BEEP
    G4 P500
    BEEP     
    G4 P500
    M84                                                                                     # turn off all motors
    M107                                                                                    # turn off fan
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET=0
    UPDATE_DELAYED_GCODE ID=DELAY_HEATERS DURATION=180

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: BASE_CANCEL_PRINT
gcode: 
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    END_PRINT

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: BASE_PAUSE
gcode: 
    {% if printer[printer.toolhead.extruder].can_extrude|lower == 'true' %}
        G1 E-3 F800                                                                    # retract
    {% else %}
        RESPOND TYPE=command MSG="Extruder is not hot enough"
    {% endif %}
    BASE_PAUSE
    PARK

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: BASE_RESUME
gcode: 
   {% if printer.extruder.can_extrude|lower == 'true' %}
       G1 E10 F800
   {% else %}
        RESPOND TYPE=command MSG="Extruder is not hot enough"
   {% endif %}  
    BASE_RESUME VELOCITY=200

[gcode_macro PARK]
description: Park toolhead
gcode:
    {% if printer.dual_carriage.active_carriage == "CARRIAGE_0" %}
        {% set x_park = printer.configfile.settings.stepper_x.position_min+0.1 %}
    {% elif printer.dual_carriage.active_carriage == "CARRIAGE_1" %}
        {% set x_park = printer.configfile.settings.dual_carriage.position_max-0.1 %}
    {% else %}
        {% set x_park = printer.configfile.settings.stepper_x.position_min+0.1 %}
    {% endif %}
    {% set y_park = printer.configfile.settings.stepper_y.position_min+1.5 %}
    {% set z_park_delta = 5.0 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - z_park_delta) %}
        {% set z_safe = z_park_delta %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        G91
        G1 Z{z_safe} F450
        G90
        G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
    {% else %}
        RESPOND TYPE=command MSG="Printer not homed"
    {% endif %} 


[gcode_macro PRIME_LINE]
gcode:
    {% set feedrate = params.F|default(30)|float * 60 %}
    {% set length = 80.0 %}
    {% set width = printer.configfile.settings.extruder.nozzle_diameter|float %}
    {% set height = ( (width / 0.04)|int - (width / 0.04 / 4)|int )|float * 0.04 %}
    {% set extrude = 1.5 * length * width * height / 2.4 %}
    {% if printer.dual_carriage.active_carriage != "CARRIAGE_1" %} 
        {% set x_start = 5.0 %}
    {% else %}
        {% set x_start = 354.0 %}
    {% endif %}
    {% set y_start = 2.0 %}
	SAVE_GCODE_STATE NAME=PRIME_LINE_STATE
    G0 X{x_start} Y{y_start} F6000                                                  # move to start position
    # G0 Z{height} F600 
    # G91                                                                             # relative positioning
    # {% if printer.dual_carriage.active_carriage != "CARRIAGE_1" %} 
    #     G1 Y{length} E{extrude} F{feedrate}                                         # prime
    # {% else %}
    #     G1 Y-{length} E{extrude} F{feedrate}                                         # prime
    # {% endif %}                                                 
    # G90
    # G1 X{x_start}
    G28 X
	RESTORE_GCODE_STATE NAME=PRIME_LINE_STATE

[gcode_macro FILAMENT_CHANGE]
gcode:
	SAVE_GCODE_STATE NAME=CHANGE_FILAMENT_STATE
	{% set timer = params.T|default(60)|float %}
	{% set unload = params.U|default(70)|float %}
	{% set load = params.L|default(100)|float %}
    {% if printer.pause_resume.is_paused %}
        RESPOND TYPE=command MSG="Already paused"
    {% else %}
        {% if printer.toolhead.homed_axes != "xyz" %}
            RESPOND TYPE=command MSG="Homing"
            G28                                                                     # home if not homed
        {% else %}
            RESPOND TYPE=command MSG="Pausing print"
            PAUSE
        {% endif %}
    {% endif %}
    RESPOND TYPE=command MSG="Changing filament..."
	# SET_IDLE_TIMEOUT TIMEOUT=600
	FILAMENT_UNLOAD U={unload}
	RESTORE_GCODE_STATE NAME=CHANGE_FILAMENT_STATE

[gcode_macro FILAMENT_LOAD]
gcode:
    {% set load = params.L|default(100)|float * 0.5 %}
	{% set extruder_temp = params.T|default(225)|float %}
    {% set motion_sensor_enabled = printer['filament_motion_sensor motion_sensor'].enabled|lower %}
    {% set motion_sensor_enabled1 = printer['filament_motion_sensor motion_sensor1'].enabled|lower %}
    SET_FILAMENT_SENSOR SENSOR=motion_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=motion_sensor1 ENABLE=0
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT_STATE
	LOW_TEMP_CHECK T={extruder_temp}
    RESPOND TYPE=command MSG="Loading filament..."
	M83
	G1 E{load} F400
	G4 P500
	G1 E{load} F150
    M400                                                                         # wait until all moves are completed
    RESPOND TYPE=command MSG="Filament loaded!"
	RESTORE_GCODE_STATE NAME=LOAD_FILAMENT_STATE
    {% if motion_sensor_enabled %}
        SET_FILAMENT_SENSOR SENSOR=motion_sensor ENABLE=1
    {% endif %}
    {% if motion_sensor_enabled1 %}
        SET_FILAMENT_SENSOR SENSOR=motion_sensor1 ENABLE=1
    {% endif %}

[gcode_macro FILAMENT_UNLOAD]
gcode:
	{% set unload = params.U|default(80)|float %}
	{% set extruder_temp = params.T|default(225)|float %}
    {% set motion_sensor_enabled = printer['filament_motion_sensor motion_sensor'].enabled|lower %}
    {% set motion_sensor_enabled1 = printer['filament_motion_sensor motion_sensor1'].enabled|lower %}
    SET_FILAMENT_SENSOR SENSOR=motion_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=motion_sensor1 ENABLE=0
	SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_STATE
	LOW_TEMP_CHECK T={extruder_temp}
    RESPOND TYPE=command MSG="Unloading filament..."
	M83
	G1 E3 F200
	G1 E-10 F200
	G1 E-{unload} F1000
    M400                                                                        # wait until all moves are completed
    RESPOND TYPE=command MSG="Filament unloaded!"
	RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_STATE
    {% if motion_sensor_enabled %}
        SET_FILAMENT_SENSOR SENSOR=motion_sensor ENABLE=1
    {% endif %}
    {% if motion_sensor_enabled1 %}
        SET_FILAMENT_SENSOR SENSOR=motion_sensor1 ENABLE=1
    {% endif %}

[gcode_macro LOW_TEMP_CHECK]
gcode:
    {% set extruder_temp = params.T|default(225)|float %}
    {% set current_extruder = printer.toolhead.extruder %}
    {% set current_extruder_temp = printer[printer.toolhead.extruder].temperature %}
    {% if current_extruder_temp > extruder_temp %}                                              # check for a setpoint for extruder
        {% set extruder_temp = current_extruder_temp %}
    {% endif %}
    {% if current_extruder_temp < extruder_temp %}                                              # heat to the target temp
        M118 Heating to {extruder_temp}
        SET_HEATER_TEMPERATURE HEATER={current_extruder} TARGET={extruder_temp}
        TEMPERATURE_WAIT SENSOR={current_extruder} MINIMUM={extruder_temp}
    {% endif %}

[gcode_macro SAVE_CURRENT_LAYER]
gcode:
    {% set current_layer = printer.print_stats.info.current_layer %}
    SAVE_VARIABLE VARIABLE=current_layer VALUE={current_layer}

[gcode_macro BEEP]
gcode:
    M300

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

[gcode_macro SPEEDTEST]
gcode:
    {% set SPEED = params.SPEED | default(200) | int * 60 %}
    {% set HEAD = params.HEAD | default(0) | int %}
    {% set i = params.I|default(1)|int %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - 10 %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - 20 %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + 10 %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + 5 %}

    SAVE_GCODE_STATE NAME=SPEEDTEST
    # G28
    SET_DUAL_CARRIAGE CARRIAGE={HEAD}
    # G1 Z10
    GET_POSITION
    G90                              # absolute positioning

    {% if HEAD == 0 %}
      {% set gap = 0 | int %}
    {% else %}
      {% set gap = 60 | int %}
    {% endif %}

    {% for iteration in range(i|int) %}
      G1 F{SPEED}
      # G1 X{maxX} Y{minY}                  # RF
      # G1 X{minX + gap} Y{maxY}            # LB
      # G1 X{maxX} Y{minY}                  # RF
      # G1 X{minX + gap} Y{maxY}            # LB

      # G1 X{maxX} Y{maxY}                  # RB

      # G1 X{minX + gap} Y{minY}            # LF
      # G1 X{maxX} Y{maxY}                  # RB
      # G1 X{minX + gap} Y{minY}            # LF
      # G1 X{maxX} Y{maxY}                  # RB

      # G1 X{maxX} Y{minY}                  # RF
      # G1 X{minX + gap} Y{minY}            # LF
      # G1 X{minX + gap} Y{maxY}            # LB
      # G1 X{maxX} Y{maxY}                  # RB
      # G1 X{maxX} Y{minY}                  # RF

      G1 X{maxX} Y{minY}
      G1 X{maxX} Y{maxY-20}
      G1 X{minX + gap} Y{maxY-20}
      G1 X{minX + gap} Y{minY}
    {% endfor %}

    # G28 X Y
    GET_POSITION
    RESTORE_GCODE_STATE NAME=SPEEDTEST

[gcode_macro DISABLE_XY]
gcode:
   SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
   SET_STEPPER_ENABLE STEPPER=dual_carriage ENABLE=0
   SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
   SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=0

[gcode_macro DISABLE_XYZ]
gcode:
   SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
   SET_STEPPER_ENABLE STEPPER=dual_carriage ENABLE=0
   SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
   SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=0
   SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0
   SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0

[gcode_macro SET_POSITION]
gcode:
    {% set X = params.X | default(0) | int %}
    {% set Y = params.Y | default(0) | int %}
    {% set Z = params.Z | default(0) | int %}
    SET_KINEMATIC_POSITION X={X} Y={Y} Z={Z}

[gcode_macro M92]
gcode:
    {% set extruder_steps = params.E|default(0.0025)|float %}
    SET_EXTRUDER_STEP_DISTANCE DISTANCE={extruder_steps}

[gcode_macro M204]                                                              # Set Acceleration
# Klipper accepts M204 S<value> OR M204 P<value> T<value> where both P and T must be specified
# PrusaSliser sends M204 P<value> without T and Klipper shows an error
# This macro makes M204 command more versatile
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}
  {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
    {% if 'P' in params %}
      {% set p = params.P|float %}
      {% if 'T' in params %}
        {% set t = params.T|float %}
        {% if p < t %}
          SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
        {% else %}
          SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
      {% else %}
        SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
      {% endif %}
    {% elif 'T' in params %}
      {% set t = params.T|float %}
      SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
  {% endif %}

[gcode_macro M205]                                                              # Set Junction deviation or Jerk
gcode:
    {% if 'J' in params %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={J}
    {% elif 'X' in params %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={X}
    {% elif 'Y' in params %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={Y}
    {% endif %}

[gcode_macro M207]                                                              # Set Firmware Retraction
gcode:
    {% set length = params.S|default(0.5)|float %}
    {% set speed = params.F|default(25)|float %}
    SET_RETRACTION RETRACT_LENGTH={length} RETRACT_SPEED={speed}

[gcode_macro M303]                                                              # PID Autotune
gcode:
    {% if 'E' in params %}
        {% set heater = params.E|default(0)|int %}
        {% set temp = params.T|default(0)|float %}
        {% if heater == 0 %}                                                    # extruder
            {% if temp >= printer.configfile.settings.extruder.min_extrude_temp|float %}
                {% if temp <= printer.configfile.settings.extruder.max_temp|float %}
                    PID_CALIBRATE HEATER=extruder TARGET={T}
                {% endif %}
            {% endif %}
        {% elif heater == -1 %}                                                 # bed
            {% if temp <= printer.configfile.settings.heater_bed.max_temp|float %}
                PID_CALIBRATE HEATER=heater_bed TARGET={T}
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro M486]
gcode:
# Parameters known to M486 are as follows:
# [C<flag>] Cancel the current object
# [P<index>] Cancel the object with the given index
# [S<index>] Set the index of the current object.
#    If the object with the given index has been canceled, this will cause
#    the firmware to skip to the next object. The value -1 is used to
#    indicate something that isn’t an object and shouldn’t be skipped.
# [T<count>] Reset the state and set the number of objects
# [U<index>] Un-cancel the object with the given index. This command will be
#    ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro FILAMENT_CONSUMED]
variable_filament_consumed: 0
variable_filament_lenght: 500   # length between the sensor and extruder
gcode:
  # save current filament consumption
  SET_GCODE_VARIABLE MACRO=FILAMENT_CONSUMED VARIABLE=filament_consumed VALUE={printer.print_stats.filament_used}
  # start checking filament consumption
  UPDATE_DELAYED_GCODE ID=DELAY_PAUSE DURATION=2

[delayed_gcode DELAY_PAUSE]
gcode:
  # use set for easier reading
  {% set consumed=printer["gcode_macro FILAMENT_CONSUMED"].filament_consumed %}
  {% set length=printer["gcode_macro FILAMENT_CONSUMED"].filament_lenght %}
  # check if predetermine length is reached
  {% if printer.print_stats.filament_used|float <= (consumed|float + length|float) %}
    # start looping this script every second
    UPDATE_DELAYED_GCODE ID=DELAY_PAUSE DURATION=2
  {% else %}
    PAUSE
  {% endif %}

[delayed_gcode DELAY_HEATERS]
gcode:
    TURN_OFF_HEATERS

[gcode_macro M900]                                                              # Set Pressure Advance
gcode:
    {% if 'K' in params %}
        SET_PRESSURE_ADVANCE ADVANCE={ params.K|float }
    {% endif %}

[gcode_macro M500]                                                              # Save Settings
gcode:
    SAVE_CONFIG

[gcode_macro M76]
gcode: 
	PAUSE

[gcode_macro M601]
gcode:
    PAUSE

[gcode_macro G27]
gcode:
	PARK

[gcode_macro M125]
gcode:
	PARK

[gcode_macro M300]
gcode:
    {% set S = params.S|default(1000)|int %}                                    # frequency in Hz
    {% set P = params.P|default(500)|int %}                                    # duration in milliseconds
    SET_PIN PIN=_BEEPER_pin VALUE=0.6 CYCLE_TIME={1.0/S if S > 0 else 1}
    G4 P{P}
    SET_PIN PIN=_BEEPER_pin VALUE=0

[gcode_macro M600]
gcode: 
	FILAMENT_CHANGE

[gcode_macro M701]
gcode: 
	FILAMENT_LOAD

[gcode_macro M702]
gcode: 
	FILAMENT_UNLOAD

[delayed_gcode init_shaper]
initial_duration: 3.0
gcode:
    SET_DUAL_CARRIAGE CARRIAGE=1
    SET_INPUT_SHAPER SHAPER_TYPE_X=MZV SHAPER_TYPE_Y=MZV SHAPER_FREQ_X=74.4 SHAPER_FREQ_Y=86.5
    SET_DUAL_CARRIAGE CARRIAGE=0
    SET_INPUT_SHAPER SHAPER_TYPE_X=MZV SHAPER_TYPE_Y=MZV SHAPER_FREQ_X=74.4 SHAPER_FREQ_Y=86.5
    M84

[gcode_macro SHAPER_Y_Settings]   
description: X,Y - shapers set 0. s- стартовая частота шейпера. d-step delta (шаг смены частоты). h-step hight (высота шага)                                                           
gcode:
    {% set myList = [ 1] %}
    {% set x_shaper = params.X|default(0)|float %}
    {% set y_shaper = params.Y|default(0)|float %}
    {% set s_shaper = params.S|default(30)|float %}
    {% set d_shaper = params.D|default(5)|float %}
    {% set h_shaper = params.H|default(5)|float %}
    SET_INPUT_SHAPER SHAPER_TYPE_X=mzv SHAPER_TYPE_Y=mzv
    SET_INPUT_SHAPER SHAPER_FREQ_X={x_shaper} SHAPER_FREQ_Y={y_shaper}
    TUNING_TOWER COMMAND=SET_INPUT_SHAPER PARAMETER=SHAPER_FREQ_Y START={s_shaper} STEP_DELTA={d_shaper} STEP_HEIGHT={h_shaper}

[gcode_macro SHAPER_X_Settings]   
description: X,Y - shapers set 0. s- стартовая частота шейпера. d-step delta (шаг смены частоты). h-step hight (высота шага)                                                          
gcode:
    {% set myList = [ 1] %}
    {% set x_shaper = params.X|default(0)|float %}
    {% set y_shaper = params.Y|default(0)|float %}
    {% set s_shaper = params.S|default(30)|float %}
    {% set d_shaper = params.D|default(5)|float %}
    {% set h_shaper = params.H|default(5)|float %}
    SET_INPUT_SHAPER SHAPER_TYPE_X=mzv SHAPER_TYPE_Y=mzv
    SET_INPUT_SHAPER SHAPER_FREQ_X={x_shaper} SHAPER_FREQ_Y={y_shaper}
    TUNING_TOWER COMMAND=SET_INPUT_SHAPER PARAMETER=SHAPER_FREQ_X START={s_shaper} STEP_DELTA={d_shaper} STEP_HEIGHT={h_shaper}