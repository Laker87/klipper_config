# Print Job Management #########################################################

[gcode_macro START_PRINT]
## PrusaSliser: 
# M190 S0
# M109 S0
# START_PRINT EXTRUDER_TEMP={first_layer_temperature[0]} BED_TEMP={first_layer_bed_temperature}
## Cura: 
# M190 S0
# M109 S0
# START_PRINT EXTRUDER_TEMP={material_print_temperature_layer_0} BED_TEMP={material_bed_temperature_layer_0}
description: Start routine for the print
variable_retract: 1
gcode: 
    {% set extruder = params.EXTRUDER|int %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(230)|float %}
    {% set bed_temp = params.BED_TEMP|default(75)|float %}
    {% set E = printer["gcode_macro START_PRINT"].retract|float %}
    {% if bed_temp > 90 %}
        {% set bed_temp_preheat = (bed_temp * 0.84)|int %}
    {% else %}
        {% set bed_temp_preheat = (bed_temp * 0.7)|int %}
    {% endif %}
    CLEAR_PAUSE
    SET_DUAL_CARRIAGE CARRIAGE={extruder}
    M220 S100                                                                               # reset feedrate
    M221 S100                                                                               # reset flowrate
	G90                                                                                     # absolute positioning
    M83                                                                                     # relative extrusion mode
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}                              # set bed temp
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp_preheat}                           # wait until bed is partially heated
    {% if extruder == 0 %}
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        {% if printer.dual_carriage.mode == "FULL_CONTROL" %}
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}                   # set extruder temp
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
        {% else %}
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}                   # set extruder temp
            SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={extruder_temp}                  # set extruder temp
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
        {% endif %}
    {% else %}
        {% if printer.dual_carriage.mode != "FULL_CONTROL" %}
            {action_respond_info("You should choose carriage_0")}
        {% endif %}
        ACTIVATE_EXTRUDER EXTRUDER=extruder1
        SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={extruder_temp}                      # set extruder temp
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
    {% endif %}
    SET_GCODE_OFFSET Z=0.0
    {% if printer.dual_carriage.mode == "DUPLICATION" %}
        SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
        SET_DUAL_CARRIAGE CARRIAGE=0
        G28                                                                                 # home
        SET_DUAL_CARRIAGE CARRIAGE=1
        G1 X175 F6000
        SET_DUAL_CARRIAGE CARRIAGE=0
        SET_DUAL_CARRIAGE_MODE MODE=DUPLICATION
    {% else %}                                                                      
        G28                                                                                 # home
    {% endif %}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp}                                   # wait for bed temp
    {% if extruder == 0 %}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}                                # wait for extruder temp
    {% else %}
    TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={extruder_temp}                                # wait for extruder temp
    {% endif %}
    # M190 S{bed_temp}                                                                      # wait for bed temp
    # M109 S{extruder_temp}                                                                 # wait for nozzle temp
	G0 Z10 F600                                                                             # raise Z
    SAVE_GCODE_STATE NAME=START_PRINT_PRIME 
    {% if printer.extruder.can_extrude|lower == 'true' %}
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        G91                                                                                 # relative positioning
        G1 E20 F200                                                                         # retract
        G90   
    {% endif %}
    {% if printer.extruder1.can_extrude|lower == 'true' %}
        {% if printer.dual_carriage.mode == "FULL_CONTROL" %}
            ACTIVATE_EXTRUDER EXTRUDER=extruder1
            G91                                                                                 # relative positioning
            G1 E20 F200                                                                         # retract
            G90   
        {% endif %}
    {% endif %}
    RESTORE_GCODE_STATE NAME=START_PRINT_PRIME                                                                               # absolute positioning
    G1 Z0.1 F600                                                                                     
    G1 Y20 F12000
    G92 E0                                                                                  # reset extruder

#	PRIME_LINE

[gcode_macro END_PRINT]
gcode:
    # {% set E = printer["gcode_macro START_PRINT"].retract|float %}
    G91                                                                                     # relative positioning
    G1 E-1 F2100                                                                            # retract
    G1 X-3 Y-3 F6000                                                                        # wipe
    G0 Z2 F200                                                                              # raise Z
    G90                                                                                     # absolute positioning
    G1 Z195 F600                                                                            # raise Z
    G28 X Y
    SAVE_GCODE_STATE NAME=END_PRINT_LIGHT                                                                                 # park
	BEEP
    SET_LED LED=caselight RED=0 GREEN=0.7 BLUE=0
    G4 P500
    BEEP
    SET_LED LED=caselight RED=0 GREEN=0.7 BLUE=0
    G4 P500
    BEEP  
    SET_LED LED=caselight RED=0 GREEN=0.7 BLUE=0    
    RESTORE_GCODE_STATE NAME=END_PRINT_LIGHT  
   M84                                                                                     # turn off all motors
    TURN_OFF_HEATERS
    M107                                                                                    # turn off fan
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1  
    SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode: 
    # {% set E = printer["gcode_macro START_PRINT"].retract|float %}
    CLEAR_PAUSE
    {% if printer[printer.toolhead.extruder].can_extrude|lower == 'true' %}
        G91                                                                                 # relative positioning
        G1 E-1 F2100                                                                        # retract
        G0 Z2 F600                                                                          # raise Z
        G90                                                                                 # absolute positioning
    {% else %}
        {action_respond_info("Extruder is not hot enough")}
    {% endif %}
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    G1 Z195 F600                                                                            # raise Z
    G28 X Y                                                                                 # park
    M84
    TURN_OFF_HEATERS
    M107                                                                                    # turn off fan

[gcode_macro PARK]
gcode:
    {% if printer.dual_carriage.active_carriage == "CARRIAGE_0" %}
        {% set x_park = params.X|default(printer.toolhead.axis_minimum.x)|float %}
        {% set x_max = printer.toolhead.axis_maximum.x|float %}
    {% else %}
        {% set x_park = params.X|default(printer.toolhead.axis_maximum.x + 45)|float %}
        {% set x_max = printer.toolhead.axis_minimum.x|float %}
    {% endif %}
    {% set y_park = params.Y|default(printer.toolhead.axis_minimum.y)|float %}
    {% set y_max = printer.toolhead.axis_maximum.y|float %}
    {% set z_park = params.Z|default(10)|float + printer.toolhead.position.z|float %}
    {% set z_max = printer.toolhead.axis_maximum.z|float %}

    # {% if x_park > x_max %}
    #     {% set x_park = x_max %}
    # {% endif %}
    {% if y_park > y_max %}
        {% set y_park = y_max %}
    {% endif %}
    {% if z_park > z_max %}
        {% set z_park = z_max %}
    {% endif %}
    SAVE_GCODE_STATE NAME=PARK_STATE
    {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}                       # home if not homed
    G90                                                                                 # absolute positioning
    G0 Z{z_park} F600 
    G0 X{x_park} Y{y_park} F6000
    RESTORE_GCODE_STATE name=PARK_STATE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing = BASE_PAUSE
gcode: 
    # {% set E = printer["gcode_macro START_PRINT"].retract|float %}
    SAVE_GCODE_STATE NAME=PAUSE_STATE
    BASE_PAUSE
    {% if printer[printer.toolhead.extruder].can_extrude|lower == 'true' %}
        G91
        G1 E-1 F2100                                                                    # retract
        G90
    {% else %}
        {action_respond_info("Extruder is not hot enough")}
    {% endif %}
    PARK

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing = BASE_RESUME
gcode: 
    # {% set E = printer["gcode_macro START_PRINT"].retract|float %}
    {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
        {% set get_params = "" %}
    {% endif %}
   {% if printer.extruder.can_extrude|lower == 'true' %}
       G91
       G1 E1 F2100
       G90
   {% else %}
       {action_respond_info("Extruder is not hot enough")}
   {% endif %}  
	RESTORE_GCODE_STATE NAME=PAUSE_STATE MOVE=1
    BASE_RESUME {get_params}

[gcode_macro PRIME_LINE]
gcode:
    {% set feedrate = params.F|default(30)|float * 60 %}
    {% set length = 60.0 %}
    {% set width = printer.configfile.settings.extruder.nozzle_diameter|float %}
    {% set height = ( (width / 0.04)|int - (width / 0.04 / 4)|int )|float * 0.04 %}
    {% set extrude = 1.5 * length * width * height / 2.4 %}
    {% if 'Y' in params %}
        {% set x_start = 5.0 %}
        {% set y_start = (printer.toolhead.axis_maximum.y|float - length) / 2 %}
    {% else %}
        {% set x_start = (printer.toolhead.axis_maximum.x|float - length) / 2 %}
        {% set y_start = 7.0 %}
    {% endif %}
	SAVE_GCODE_STATE NAME=PRIME_LINE_STATE
	G0 Z0.12 F400 
    G0 Y25 F12000                                                                   # cut the crap
    G0 Z0.5 F600 
    G0 X{x_start} Y{y_start} F6000                                                  # move to start position
    G0 Z{height} F600 
    G91                                                                             # relative positioning
    {% if 'Y' in params %}
        G1 Y{length} E{extrude} F{feedrate}                                         # prime
#	     G1 X{width} F5000
#	     G1 Y-{length} F6000                                                        # wipe
    {% else %}
        G1 X{length} E{extrude} F{feedrate}                                         # prime
#        G1 Y{width} F5000
#        G1 X-{length} F6000                                                        # wipe                                                    
    {% endif %}
	G0 Z1 F600 
	RESTORE_GCODE_STATE NAME=PRIME_LINE_STATE

[gcode_macro CHANGE_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=CHANGE_FILAMENT_STATE
	{% set timer = params.T|default(60)|float %}
	{% set unload = params.U|default(70)|float %}
	{% set load = params.L|default(100)|float %}
    {% if printer.pause_resume.is_paused %}
        M118 Already paused
    {% else %}
        {% if printer.toolhead.homed_axes != "xyz" %}
            M118 Homing
            G28                                                                     # home if not homed
        {% else %}
            M118 Pausing print
            PAUSE
        {% endif %}
    {% endif %}
	M118 Changing filament...
	SET_IDLE_TIMEOUT TIMEOUT=600
	UNLOAD_FILAMENT U={unload}
#	COUNTDOWN TIME={timer} MSG="Change filament! Time left: "
#	LOAD_FILAMENT L={load}
	RESTORE_GCODE_STATE NAME=CHANGE_FILAMENT_STATE

[gcode_macro LOAD_FILAMENT]
gcode:
    # {% set current_extruder = printer.save_variables.variables.currentextruder %}
    # {% set extruder = params.extruder|default(current_extruder)|int %}
    {% set load = params.L|default(100)|float * 0.5 %}
	{% set extruder_temp = params.T|default(225)|float %}
	SAVE_GCODE_STATE NAME=LOAD_FILAMENT_STATE
    # {% if extruder == 0 %}
    #     ACTIVATE_EXTRUDER EXTRUDER=extruder
    # {% else %}
    #     ACTIVATE_EXTRUDER EXTRUDER=extruder1
    # {% endif %}
	LOW_TEMP_CHECK T={extruder_temp}
	M118 Loading filament...
	M83
	G1 E{load} F400
	G4 P500
	G1 E{load} F150
    M400                                                                         # wait until all moves are completed
	M118 Filament loaded!
	RESTORE_GCODE_STATE NAME=LOAD_FILAMENT_STATE

[gcode_macro UNLOAD_FILAMENT]
gcode:
    # {% set current_extruder = printer.save_variables.variables.currentextruder %}
	{% set unload = params.U|default(80)|float %}
	{% set extruder_temp = params.T|default(225)|float %}
#	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_STATE
	LOW_TEMP_CHECK T={extruder_temp}
	M118 Unloading filament...
	M83
	G1 E3 F200
	G1 E-10 F200
	G1 E-{unload} F1000
    M400                                                                        # wait until all moves are completed
	M118 Filament unloaded!
	RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_STATE

[gcode_macro LOW_TEMP_CHECK]
gcode:
    {% set extruder_temp = params.T|default(225)|float %}
    {% set current_extruder = printer.toolhead.extruder %}
    {% set current_extruder_temp = printer[printer.toolhead.extruder].temperature %}
    {% if current_extruder_temp > extruder_temp %}                                              # check for a setpoint for extruder
        {% set extruder_temp = current_extruder_temp %}
    {% endif %}
    {% if current_extruder_temp < extruder_temp %}                                              # heat to the target temp
        M118 Heating to {extruder_temp}
        SET_HEATER_TEMPERATURE HEATER={current_extruder} TARGET={extruder_temp}
        TEMPERATURE_WAIT SENSOR={current_extruder} MINIMUM={extruder_temp}
    {% endif %}

[gcode_macro COUNTDOWN]
gcode: 
    {% set timer = params.TIME|default(10)|int %}
    {% set message = params.MSG|default("Time: ") %}
    # countdown
    {% if timer > 60 %}
        {% for s in range(timer, 60, -10) %}
            M118 {message} {s}s
            G4 P10000                                                           # wait 10 seconds
        {% endfor %}
        {% set timer = 60 %}
    {% endif %}
    {% if timer > 10 %}
        {% for s in range(timer, 10, -5) %}
            M118 {message} {s}s
            G4 P5000                                                            # wait 5 seconds
        {% endfor %}
        {% set timer = 10 %}
    {% endif %}
    {% if timer > 0 %}
        {% for s in range(timer, 0, -1) %}
            M118 {message} {s}s
            G4 P1000                                                            # wait 1 second
        {% endfor %}
    {% endif %}
    BEEP

[gcode_macro LED]
gcode:
    {% set led_on = printer.save_variables.variables.led_on %}
    {% set case_blue = printer.configfile.config['led caselight'].initial_blue|float %}
    {% set case_green = printer.configfile.config['led caselight'].initial_green|float %}
    {% set case_red = printer.configfile.config['led caselight'].initial_red|float %}
    {% set fan_blue = printer.configfile.config['neopixel fan_led'].initial_blue|float %}
    {% set fan_green = printer.configfile.config['neopixel fan_led'].initial_green|float %}
    {% set fan_red = printer.configfile.config['neopixel fan_led'].initial_red|float %}
    {% if led_on == 0 %}
        SET_LED LED=fan_led RED={fan_red} GREEN={fan_green} BLUE={fan_blue}
        SET_LED LED=caselight RED={case_red} GREEN={case_green} BLUE={case_blue}
        SAVE_VARIABLE VARIABLE=led_on VALUE=1
    {% else %}
        SET_LED LED=fan_led RED=0 GREEN=0 BLUE=0
        SET_LED LED=caselight RED=0 GREEN=0 BLUE=0
        SAVE_VARIABLE VARIABLE=led_on VALUE=0
    {% endif %}

[gcode_macro BEEP]
gcode:
    {% set S = params.S|default(1000)|int %}                                    # frequency in Hz
    {% set P = params.P|default(500)|int %}                                     # duration in milliseconds
    SET_PIN PIN=_BEEPER_pin VALUE={S} CYCLE_TIME=1.0
    G4 P{P}
    SET_PIN PIN=_BEEPER_pin VALUE=0

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

[gcode_macro M92]
gcode:
    {% set extruder_steps = params.E|default(0.0025)|float %}
    SET_EXTRUDER_STEP_DISTANCE DISTANCE={extruder_steps}

[gcode_macro M204]                                                              # Set Acceleration
# Klipper accepts M204 S<value> OR M204 P<value> T<value> where both P and T must be specified
# PrusaSliser sends M204 P<value> without T and Klipper shows an error
# This macro makes M204 command more versatile
rename_existing: M204.1
gcode:
    {% set factor = params.F|default(0.5)|float %}
    {% if 'S' in params %}
        SET_VELOCITY_LIMIT ACCEL={S} ACCEL_TO_DECEL={ S|float * factor }
    {% else %}
        {% if 'P' in params %}
            {% if 'T' in params %}
                {% if P|int < T|int %}
                    SET_VELOCITY_LIMIT ACCEL={P} ACCEL_TO_DECEL={ P|float * factor }
                {% else %}
                    SET_VELOCITY_LIMIT ACCEL={T} ACCEL_TO_DECEL={ T|float * factor }
                {% endif %}
            {% else %}
                SET_VELOCITY_LIMIT ACCEL={P} ACCEL_TO_DECEL={ P|float * factor }
            {% endif %}
        {% elif 'T' in params %}
            SET_VELOCITY_LIMIT ACCEL={T} ACCEL_TO_DECEL={ T|float * factor }
        {% endif %}
    {% endif %}

[gcode_macro M205]                                                              # Set Junction deviation or Jerk
gcode:
    {% if 'J' in params %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={J}
    {% elif 'X' in params %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={X}
    {% elif 'Y' in params %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={Y}
    {% endif %}

[gcode_macro M207]                                                              # Set Firmware Retraction
gcode:
    {% set length = params.S|default(0.5)|float %}
    {% set speed = params.F|default(25)|float %}
    SET_RETRACTION RETRACT_LENGTH={length} RETRACT_SPEED={speed}

[gcode_macro M303]                                                              # PID Autotune
gcode:
    {% if 'E' in params %}
        {% set heater = params.E|default(0)|int %}
        {% set temp = params.T|default(0)|float %}
        {% if heater == 0 %}                                                    # extruder
            {% if temp >= printer.configfile.settings.extruder.min_extrude_temp|float %}
                {% if temp <= printer.configfile.settings.extruder.max_temp|float %}
                    PID_CALIBRATE HEATER=extruder TARGET={T}
                {% endif %}
            {% endif %}
        {% elif heater == -1 %}                                                 # bed
            {% if temp <= printer.configfile.settings.heater_bed.max_temp|float %}
                PID_CALIBRATE HEATER=heater_bed TARGET={T}
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro M486]                                                              # Label Objects
# M486 has no realization in Klipper yet
# This empty macro stops M486-error terminal messages
gcode:
    # Do nothing

[gcode_macro M900]                                                              # Set Pressure Advance
gcode:
    {% if 'K' in params %}
        SET_PRESSURE_ADVANCE ADVANCE={ params.K|float }
    {% endif %}

[gcode_macro M500]                                                              # Save Settings
gcode:
    SAVE_CONFIG

[gcode_macro M76]
gcode: 
	PAUSE

[gcode_macro M601]
gcode:
    PAUSE

[gcode_macro G27]
gcode:
	PARK

[gcode_macro M125]
gcode:
	PARK

[gcode_macro M300]
gcode:
	BEEP

[gcode_macro M600]
gcode: 
	CHANGE_FILAMENT

[gcode_macro M701]
gcode: 
	LOAD_FILAMENT

[gcode_macro M702]
gcode: 
	UNLOAD_FILAMENT