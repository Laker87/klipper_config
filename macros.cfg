 # Print Job Management #########################################################
[gcode_macro START_PRINT]
## PrusaSliser: 
# M190 S0
# M109 S0
# START_PRINT EXTRUDER=[current_extruder] EXTRUDERS=[current_extruder] EXTRUDER_TEMP={first_layer_temperature[0]} EXTRUDER1_TEMP={first_layer_temperature[1]} BED_TEMP={first_layer_bed_temperature}
## Cura: 
# M190 S0
# M109 S0
# START_PRINT EXTRUDER={adhesion_extruder_nr} EXTRUDERS={extruders_enabled_count} EXTRUDER_TEMP={material_print_temperature_layer_0, 0} EXTRUDER1_TEMP={material_print_temperature_layer_0, 1} BED_TEMP={material_bed_temperature_layer_0}
description: Start routine for the print
variable_retract: 1
gcode: 
    {% set extruder = params.EXTRUDER|int %}
    {% set extruders = params.EXTRUDERS|int %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(230)|float %}
    {% set extruder1_temp = params.EXTRUDER1_TEMP|default(230)|float %}
    {% set bed_temp = params.BED_TEMP|default(75)|float %}
    {% if bed_temp > 90 %}
        {% set bed_temp_preheat = (bed_temp * 0.84)|int %}
    {% else %}
        {% set bed_temp_preheat = (bed_temp * 0.7)|int %}
    {% endif %}
    CLEAR_PAUSE
    SET_DUAL_CARRIAGE CARRIAGE={extruder}
    M220 S100                                                                               # reset feedrate
    M221 S100                                                                               # reset flowrate
	G90                                                                                     # absolute positioning
    M83                                                                                     # relative extrusion mode
    # Heating
    UPDATE_DELAYED_GCODE ID=DELAY_HEATERS DURATION=0
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}                              # set bed temp
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp_preheat}                           # wait until bed is partially heated
    {% if extruders != 2 %}
        {% if extruder == 0 %}
            SET_DUAL_CARRIAGE CARRIAGE=0
            ACTIVATE_EXTRUDER EXTRUDER=extruder
            {% if printer.dual_carriage.mode == "FULL_CONTROL" %}
                SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}               # set extruder temp
                SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
            {% else %}
                SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}               # set extruder temp
                SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={extruder1_temp}             # set extruder1 temp
                SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
            {% endif %}
        {% else %}
            SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
            SET_DUAL_CARRIAGE CARRIAGE=1
            ACTIVATE_EXTRUDER EXTRUDER=extruder1
            SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={extruder1_temp}                 # set extruder1 temp
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
        {% endif %}
    {% else %}
        SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}                       # set extruder temp
        SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={extruder1_temp}                     # set extruder1 temp
    {% endif %}
    SET_GCODE_OFFSET Z=0.0
    # Homing
    {% if printer.dual_carriage.mode == "DUPLICATION" %}
        SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
        SET_DUAL_CARRIAGE CARRIAGE=0
        LAZY_HOME
        SET_DUAL_CARRIAGE CARRIAGE=1
        G1 X200 F6000
        SET_DUAL_CARRIAGE CARRIAGE=0
        SET_DUAL_CARRIAGE_MODE MODE=DUPLICATION
    {% else %}                                                                      
        LAZY_HOME
    {% endif %}
    G0 Z2 F600                                                                             # raise Z
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp}                                   # wait for bed temp
    {% if extruders != 2 %}
        {% if extruder == 0 %}
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}                        # wait for extruder temp
        {% else %}
            TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={extruder1_temp}                      # wait for extruder temp
        {% endif %}
    {% else %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}    
        TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={extruder1_temp}
    {% endif %}
    SET_FILAMENT_SENSOR SENSOR=motion_sensor ENABLE=1
    # Clean nozzle
    CLEAN_NOZZLE

[gcode_macro CLEAN_NOZZLE]
gcode:
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        SET_DUAL_CARRIAGE CARRIAGE=0
        G1 E30 F200
        G1 X20 F12000
        G1 X-19 F12000
        G1 X20 F12000
        G1 X-19 F12000
    {% else %}
        M118 "Extruder is not hot enough"
    {% endif %}
    {% if printer.extruder1.can_extrude|lower == 'true' %}
        {% if printer.dual_carriage.mode == "FULL_CONTROL" %}
            ACTIVATE_EXTRUDER EXTRUDER=extruder1
            SET_DUAL_CARRIAGE CARRIAGE=1
            G1 E30 F200
            G1 X-20 F12000
            G1 X19 F12000
            G1 X-20 F12000
            G1 X19 F12000                                                              # retract
        {% endif %}
    {% else %}
        M118 "Extruder1 is not hot enough"
    {% endif %}
    G90
    G0 Z0.2 F600                                                                      
    # G1 Y25 F12000
    # {% if printer.extruder.can_extrude|lower == 'true' %}
    #     SET_DUAL_CARRIAGE CARRIAGE=0
    #     ACTIVATE_EXTRUDER EXTRUDER=extruder
    #     PRIME_LINE
    # {% endif %}
    # {% if printer.extruder1.can_extrude|lower == 'true' %}
    #     {% if printer.dual_carriage.mode == "FULL_CONTROL" %}
    #         SET_DUAL_CARRIAGE CARRIAGE=1
    #         ACTIVATE_EXTRUDER EXTRUDER=extruder1
    #         PRIME_LINE
    #     {% endif %}
    # {% endif %}
    # G0 Z0.6 F600 
    G92 E0

[gcode_macro END_PRINT]
gcode:
    CLEAR_PAUSE
    SET_FILAMENT_SENSOR SENSOR=motion_sensor ENABLE=0
    {% if printer[printer.toolhead.extruder].can_extrude|lower == 'true' %}
        G91                                                                                 # relative positioning
        G1 E-1 F2100                                                                        # retract
        G0 Z2 F600                                                                          # raise Z
        G90                                                                                 # absolute positioning
    {% else %}
        {action_respond_info("Extruder is not hot enough")}
    {% endif %}
    G1 Z195 F600                                                                            # raise Z
    SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1                                                                                   # park
    G1 X1 Y1 F4000
	BEEP
    G4 P500
    BEEP
    G4 P500
    BEEP     
    G4 P500
    M84                                                                                     # turn off all motors
    M107                                                                                    # turn off fan
    UPDATE_DELAYED_GCODE ID=DELAY_HEATERS DURATION=180
#    TURN_OFF_HEATERS

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode: 
    CLEAR_PAUSE
    SET_FILAMENT_SENSOR SENSOR=motion_sensor ENABLE=0
    {% if printer[printer.toolhead.extruder].can_extrude|lower == 'true' %}
        G91                                                                                 # relative positioning
        G1 E-1 F2100                                                                        # retract
        G0 Z2 F600                                                                          # raise Z
        G90                                                                                 # absolute positioning
    {% else %}
        {action_respond_info("Extruder is not hot enough")}
    {% endif %}
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL
    G1 Z195 F600                                                                            # raise Z
    G28 X                                                                                   # park
    G1 Y0.2 F4000
    M84
    M107                                                                                    # turn off fan
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1                                                                                 # turn off fan
    UPDATE_DELAYED_GCODE ID=DELAY_HEATERS DURATION=180
#    TURN_OFF_HEATERS

[gcode_macro PARK]
gcode:
    {% if printer.dual_carriage.active_carriage == "CARRIAGE_0" %}
        {% set x_park = params.X|default(printer.toolhead.axis_minimum.x+1)|float %}
        {% set x_max = printer.toolhead.axis_maximum.x|float %}
    {% else %}
        {% set x_park = params.X|default(printer.toolhead.axis_maximum.x + 45)|float %}
        {% set x_max = printer.toolhead.axis_minimum.x|float %}
    {% endif %}
    {% set y_park = params.Y|default(printer.toolhead.axis_minimum.y+2)|float %}
    {% set y_max = printer.toolhead.axis_maximum.y|float %}
    {% set z_park = params.Z|default(10)|float + printer.toolhead.position.z|float %}
    {% set z_max = printer.toolhead.axis_maximum.z|float %}

    # {% if x_park > x_max %}
    #     {% set x_park = x_max %}
    # {% endif %}
    {% if y_park > y_max %}
        {% set y_park = y_max %}
    {% endif %}
    {% if z_park > z_max %}
        {% set z_park = z_max %}
    {% endif %}
    SAVE_GCODE_STATE NAME=PARK_STATE
    {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}                       # home if not homed
    G90                                                                                 # absolute positioning
    G0 Z{z_park} F600 
    G0 X{x_park} Y{y_park} F6000
    RESTORE_GCODE_STATE name=PARK_STATE

[gcode_macro LAZY_HOME]
gcode:
    # {% if printer.toolhead.homed_axes != 'xyz' %} 
        G28
        # G28 X 
        # SENSORLESS_HOME_Y
        # G28 Z 
    # {% endif %}

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing = BASE_PAUSE
gcode: 
    SAVE_GCODE_STATE NAME=PAUSE_STATE
    BASE_PAUSE
    {% if printer[printer.toolhead.extruder].can_extrude|lower == 'true' %}
        G91
        G1 E-1 F2100                                                                    # retract
        G90
    {% else %}
        {action_respond_info("Extruder is not hot enough")}
    {% endif %}
    PARK

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing = BASE_RESUME
gcode: 
    {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
        {% set get_params = "" %}
    {% endif %}
   {% if printer.extruder.can_extrude|lower == 'true' %}
       G91
       G1 E1 F2100
       G90
   {% else %}
       {action_respond_info("Extruder is not hot enough")}
   {% endif %}  
	RESTORE_GCODE_STATE NAME=PAUSE_STATE MOVE=1
    BASE_RESUME {get_params}

[gcode_macro PRIME_LINE]
gcode:
    {% set feedrate = params.F|default(30)|float * 60 %}
    {% set length = 80.0 %}
    {% set width = printer.configfile.settings.extruder.nozzle_diameter|float %}
    {% set height = ( (width / 0.04)|int - (width / 0.04 / 4)|int )|float * 0.04 %}
    {% set extrude = 1.5 * length * width * height / 2.4 %}
    {% if printer.dual_carriage.active_carriage != "CARRIAGE_1" %} 
        {% set x_start = 5.0 %}
    {% else %}
        {% set x_start = 354.0 %}
    {% endif %}
    {% set y_start = 2.0 %}
	SAVE_GCODE_STATE NAME=PRIME_LINE_STATE
    G0 X{x_start} Y{y_start} F6000                                                  # move to start position
    # G0 Z{height} F600 
    # G91                                                                             # relative positioning
    # {% if printer.dual_carriage.active_carriage != "CARRIAGE_1" %} 
    #     G1 Y{length} E{extrude} F{feedrate}                                         # prime
    # {% else %}
    #     G1 Y-{length} E{extrude} F{feedrate}                                         # prime
    # {% endif %}                                                 
    # G90
    # G1 X{x_start}
    G28 X
	RESTORE_GCODE_STATE NAME=PRIME_LINE_STATE

[gcode_macro FILAMENT_CHANGE]
gcode:
	SAVE_GCODE_STATE NAME=CHANGE_FILAMENT_STATE
	{% set timer = params.T|default(60)|float %}
	{% set unload = params.U|default(70)|float %}
	{% set load = params.L|default(100)|float %}
    {% if printer.pause_resume.is_paused %}
        M118 Already paused
    {% else %}
        {% if printer.toolhead.homed_axes != "xyz" %}
            M118 Homing
            G28                                                                     # home if not homed
        {% else %}
            M118 Pausing print
            PAUSE
        {% endif %}
    {% endif %}
	M118 Changing filament...
	SET_IDLE_TIMEOUT TIMEOUT=600
	FILAMENT_UNLOAD U={unload}
	RESTORE_GCODE_STATE NAME=CHANGE_FILAMENT_STATE

[gcode_macro FILAMENT_LOAD]
gcode:
    # {% set current_extruder = printer.save_variables.variables.currentextruder %}
    # {% set extruder = params.extruder|default(current_extruder)|int %}
    {% set load = params.L|default(100)|float * 0.5 %}
	{% set extruder_temp = params.T|default(225)|float %}
    # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	SAVE_GCODE_STATE NAME=LOAD_FILAMENT_STATE
	LOW_TEMP_CHECK T={extruder_temp}
	M118 Loading filament...
	M83
	G1 E{load} F400
	G4 P500
	G1 E{load} F150
    M400                                                                         # wait until all moves are completed
	M118 Filament loaded!
	RESTORE_GCODE_STATE NAME=LOAD_FILAMENT_STATE

[gcode_macro FILAMENT_UNLOAD]
gcode:
	{% set unload = params.U|default(80)|float %}
	{% set extruder_temp = params.T|default(225)|float %}
	# SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_STATE
	LOW_TEMP_CHECK T={extruder_temp}
	M118 Unloading filament...
	M83
	G1 E3 F200
	G1 E-10 F200
	G1 E-{unload} F1000
    M400                                                                        # wait until all moves are completed
	M118 Filament unloaded!
	RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_STATE

[gcode_macro LOW_TEMP_CHECK]
gcode:
    {% set extruder_temp = params.T|default(225)|float %}
    {% set current_extruder = printer.toolhead.extruder %}
    {% set current_extruder_temp = printer[printer.toolhead.extruder].temperature %}
    {% if current_extruder_temp > extruder_temp %}                                              # check for a setpoint for extruder
        {% set extruder_temp = current_extruder_temp %}
    {% endif %}
    {% if current_extruder_temp < extruder_temp %}                                              # heat to the target temp
        M118 Heating to {extruder_temp}
        SET_HEATER_TEMPERATURE HEATER={current_extruder} TARGET={extruder_temp}
        TEMPERATURE_WAIT SENSOR={current_extruder} MINIMUM={extruder_temp}
    {% endif %}

[gcode_macro COUNTDOWN]
gcode: 
    {% set timer = params.TIME|default(10)|int %}
    {% set message = params.MSG|default("Time: ") %}
    # countdown
    {% if timer > 60 %}
        {% for s in range(timer, 60, -10) %}
            M118 {message} {s}s
            G4 P10000                                                           # wait 10 seconds
        {% endfor %}
        {% set timer = 60 %}
    {% endif %}
    {% if timer > 10 %}
        {% for s in range(timer, 10, -5) %}
            M118 {message} {s}s
            G4 P5000                                                            # wait 5 seconds
        {% endfor %}
        {% set timer = 10 %}
    {% endif %}
    {% if timer > 0 %}
        {% for s in range(timer, 0, -1) %}
            M118 {message} {s}s
            G4 P1000                                                            # wait 1 second
        {% endfor %}
    {% endif %}
    BEEP

[gcode_macro SENSORLESS_HOME_Y]
gcode:
    {% set HOME_CUR = 0.800 %}
    {% set driver_config_y = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set driver_config_y1 = printer.configfile.settings['tmc2209 stepper_y1'] %}
    {% set RUN_CUR_Y = driver_config_y.run_current %}
    {% set RUN_CUR_Y1 = driver_config_y1.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
    SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P200
    # Home
    G28 Y0
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR_Y}
    SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={RUN_CUR_Y1}

[gcode_macro BEEP]
gcode:
    M300

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

[gcode_macro SPEEDTEST]
gcode:
    {% set SPEED = params.SPEED | default(100) | int * 60 %}
    {% set HEAD = params.HEAD | default(0) | int %}
    {% set i = params.I|default(1)|int %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - 2 %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - 20 %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + 2 %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + 2 %}

    SAVE_GCODE_STATE NAME=SPEEDTEST
    G28
    SET_DUAL_CARRIAGE CARRIAGE={HEAD}
    G1 Z10
    GET_POSITION
    G90                              # absolute positioning

    {% if HEAD == 0 %}
      {% set gap = 0 | int %}
    {% else %}
      {% set gap = 60 | int %}
    {% endif %}

    {% for iteration in range(i|int) %}
      G1 F{SPEED}
      G1 X{maxX} Y{minY}                  # RF
      G1 X{minX + gap} Y{maxY}            # LB
      G1 X{maxX} Y{minY}                  # RF
      G1 X{minX + gap} Y{maxY}            # LB

      G1 X{maxX} Y{maxY}                  # RB

      G1 X{minX + gap} Y{minY}            # LF
      G1 X{maxX} Y{maxY}                  # RB
      G1 X{minX + gap} Y{minY}            # LF
      G1 X{maxX} Y{maxY}                  # RB

      G1 X{maxX} Y{minY}                  # RF
      G1 X{minX + gap} Y{minY}            # LF
      G1 X{minX + gap} Y{maxY}            # LB
      G1 X{maxX} Y{maxY}                  # RB
      G1 X{maxX} Y{minY}                  # RF
    {% endfor %}

    G28 X Y
    GET_POSITION
    RESTORE_GCODE_STATE NAME=SPEEDTEST

[gcode_macro DISABLE_XY]
gcode:
   SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
   SET_STEPPER_ENABLE STEPPER=dual_carriage ENABLE=0
   SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
   SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=0

[gcode_macro DISABLE_XYZ]
gcode:
   SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
   SET_STEPPER_ENABLE STEPPER=dual_carriage ENABLE=0
   SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
   SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=0
   SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0
   SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=0

[gcode_macro M92]
gcode:
    {% set extruder_steps = params.E|default(0.0025)|float %}
    SET_EXTRUDER_STEP_DISTANCE DISTANCE={extruder_steps}

[gcode_macro M204]                                                              # Set Acceleration
# Klipper accepts M204 S<value> OR M204 P<value> T<value> where both P and T must be specified
# PrusaSliser sends M204 P<value> without T and Klipper shows an error
# This macro makes M204 command more versatile
rename_existing: M204.1
gcode:
    {% set factor = params.F|default(0.5)|float %}
    {% if 'S' in params %}
        SET_VELOCITY_LIMIT ACCEL={S} ACCEL_TO_DECEL={ S|float * factor }
    {% else %}
        {% if 'P' in params %}
            {% if 'T' in params %}
                {% if P|int < T|int %}
                    SET_VELOCITY_LIMIT ACCEL={P} ACCEL_TO_DECEL={ P|float * factor }
                {% else %}
                    SET_VELOCITY_LIMIT ACCEL={T} ACCEL_TO_DECEL={ T|float * factor }
                {% endif %}
            {% else %}
                SET_VELOCITY_LIMIT ACCEL={P} ACCEL_TO_DECEL={ P|float * factor }
            {% endif %}
        {% elif 'T' in params %}
            SET_VELOCITY_LIMIT ACCEL={T} ACCEL_TO_DECEL={ T|float * factor }
        {% endif %}
    {% endif %}

[gcode_macro M205]                                                              # Set Junction deviation or Jerk
gcode:
    {% if 'J' in params %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={J}
    {% elif 'X' in params %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={X}
    {% elif 'Y' in params %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={Y}
    {% endif %}

[gcode_macro M207]                                                              # Set Firmware Retraction
gcode:
    {% set length = params.S|default(0.5)|float %}
    {% set speed = params.F|default(25)|float %}
    SET_RETRACTION RETRACT_LENGTH={length} RETRACT_SPEED={speed}

[gcode_macro M303]                                                              # PID Autotune
gcode:
    {% if 'E' in params %}
        {% set heater = params.E|default(0)|int %}
        {% set temp = params.T|default(0)|float %}
        {% if heater == 0 %}                                                    # extruder
            {% if temp >= printer.configfile.settings.extruder.min_extrude_temp|float %}
                {% if temp <= printer.configfile.settings.extruder.max_temp|float %}
                    PID_CALIBRATE HEATER=extruder TARGET={T}
                {% endif %}
            {% endif %}
        {% elif heater == -1 %}                                                 # bed
            {% if temp <= printer.configfile.settings.heater_bed.max_temp|float %}
                PID_CALIBRATE HEATER=heater_bed TARGET={T}
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro FILAMENT_CONSUMED]
variable_filament_consumed: 0
variable_filament_lenght: 500   # length between the sensor and extruder
gcode:
  # save current filament consumption
  SET_GCODE_VARIABLE MACRO=FILAMENT_CONSUMED VARIABLE=filament_consumed VALUE={printer.print_stats.filament_used}
  # start checking filament consumption
  UPDATE_DELAYED_GCODE ID=DELAY_PAUSE DURATION=2

[delayed_gcode DELAY_PAUSE]
gcode:
  # use set for easier reading
  {% set consumed=printer["gcode_macro FILAMENT_CONSUMED"].filament_consumed %}
  {% set length=printer["gcode_macro FILAMENT_CONSUMED"].filament_lenght %}
  # check if predetermine length is reached
  {% if printer.print_stats.filament_used|float <= (consumed|float + length|float) %}
    # start looping this script every second
    UPDATE_DELAYED_GCODE ID=DELAY_PAUSE DURATION=2
  {% else %}
    PAUSE
  {% endif %}

[delayed_gcode DELAY_HEATERS]
gcode:
    TURN_OFF_HEATERS

[gcode_macro M900]                                                              # Set Pressure Advance
gcode:
    {% if 'K' in params %}
        SET_PRESSURE_ADVANCE ADVANCE={ params.K|float }
    {% endif %}

[gcode_macro M500]                                                              # Save Settings
gcode:
    SAVE_CONFIG

[gcode_macro M76]
gcode: 
	PAUSE

[gcode_macro M601]
gcode:
    PAUSE

[gcode_macro G27]
gcode:
	PARK

[gcode_macro M125]
gcode:
	PARK

[gcode_macro M300]
gcode:
    {% set S = params.S|default(800)|int %}                                    # frequency in Hz
    {% set P = params.P|default(500)|int %}                                    # duration in milliseconds
    SET_PIN PIN=_BEEPER_pin VALUE=0.5 CYCLE_TIME={1.0/S if S > 0 else 1}
    G4 P{P}
    SET_PIN PIN=_BEEPER_pin VALUE=0

[gcode_macro M600]
gcode: 
	FILAMENT_CHANGE

[gcode_macro M701]
gcode: 
	FILAMENT_LOAD

[gcode_macro M702]
gcode: 
	FILAMENT_UNLOAD